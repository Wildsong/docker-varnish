#
#  This is intended to set up Varnish to run under Docker Swarm.
#  For Compose, use compose.yaml instead.
#
configs:
  varnish_config:
    external: true
  hitch_config:
    file: ./etc/hitch.conf

volumes:
  certs:
    name: certs
    external: true

networks:
  default:
    name: varnish_default

services:

# Varnish and hitch will communicate over port 8443 over the proxy network
# 2023-03-27 Note the "enterprise" (not free) version of Varnish has TLS built in.
# I imagine eventually Hitch will be deprecated.

  # I listen for everything on port 443, using Let's Encrypt certificates
  # and then send everything over the PROXY connection to Varnish on port 8443
  hitch:
#    image: nginx:latest # Hacky way to test settings (won't keep crashing and restarting)
    image: hitch
    configs:
      - source: hitch_config
        target: /etc/hitch/hitch.conf
    volumes:
      - certs:/etc/letsencrypt:ro
    ports:
      # Move to port 444 if you want to do testing on production server
      - "443:443"
#    healthcheck:
#      no curl is installed here
#      test: curl --fail https://localhost:443/ || exit 1
#      interval: 60s
#      retries: 3
#      start_period: 20s
#      timeout: 10s
    deploy:
      mode: global
      update_config:
        order: 'stop-first'
      restart_policy:
        condition: any
        delay: 10s # Wait between restart attempts
        window: 30s # Wait this long before deciding if restart was successful.

  # I need to have port 80 visible so that I can redirect traffic to TLS.
  # The challenge server runs there, too.
  # Everything else comes in from hitch.
  varnish:
    image: ghcr.io/wildsong/varnish:latest
    configs:
      - source: varnish_config
        target: /etc/varnish/default.vcl
    ports:
      - "80:80"
    tmpfs: "/var/lib/varnish/varnishd:rw,exec"
    healthcheck:
      interval: 60s
      retries: 3
      start_period: 20s
      timeout: 10s
    deploy:
      mode: global
      update_config:
        order: 'stop-first'
      restart_policy:
        condition: any
        delay: 10s # Wait between restart attempts
        window: 30s # Wait this long before deciding if restart was successful.
